{"version":3,"sources":["index.js","plugins/lib-builder.js"],"names":["PluginError","PLUGIN_NAME","g","lazy","buildLibrary","entryFilename","entryPath","destination","outFilename","entry","join","stream","sourceMap","pipe","sourcemaps","init","loadMaps","babel","presets","plugins","uglify","rename","write","sourceRoot","file","relative","cwd","dest"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;ACGA,IAAMA,cAAc,mBAAMA,WAA1B;AACA,IAAMC,cAAc,sBAApB;AACA,IAAMC,IAAI,+BAAgB,EAACC,MAAM,IAAP,EAAhB,CAAV;;AAEA,SAAgBC,YAAhB,GAA8H;AAAA,MAAjGC,aAAiG,uEAAjF,UAAiF;AAAA,MAArEC,SAAqE,uEAAzD,OAAyD;AAAA,MAAhDC,WAAgD,uEAAlC,QAAkC;AAAA,MAAxBC,WAAwB,uEAAZ,UAAY;;AAC5H,MAAI,CAACH,aAAL,EAAoB;AAClB,UAAM,IAAIL,WAAJ,CAAgBC,WAAhB,EAA6B,oBAA7B,CAAN;AACD;AACD,MAAMQ,QAAQ,eAAKC,IAAL,CAAUJ,SAAV,EAAqBD,aAArB,CAAd;;AAEA,MAAMM,SAAS,4BAAO;AACpBF,WAAOA,KADa;AAEpBG,eAAW,IAFS,EAAP,EAGZC,IAHY,CAGP,iCAAOR,aAAP,EAAsBC,SAAtB,CAHO,EAIZO,IAJY,CAIP,4BAJO,EAKZA,IALY,CAKPX,EAAEY,UAAF,CAAaC,IAAb,CAAkB,EAACC,UAAU,IAAX,EAAlB,CALO,EAMZH,IANY,CAMPX,EAAEe,KAAF,CAAQ;AACZC,aAAS,CAAC,QAAD,EAAW,SAAX,CADG;AAEZC,aAAS,CAAC,6BAAD,EAAgC,6BAAhC,EAA+D,oBAA/D;AAFG,GAAR,CANO,EAUZN,IAVY,CAUPX,EAAEkB,MAAF,EAVO,EAWZP,IAXY,CAWPX,EAAEmB,MAAF,CAASb,WAAT,CAXO,EAYZK,IAZY,CAYPX,EAAEY,UAAF,CAAaQ,KAAb,CAAmB,GAAnB,EAAwB;AAC5BC,gBAAY,oBAACC,IAAD,EAAU;AACpB,aAAO,eAAKC,QAAL,CAAcD,KAAKC,QAAnB,EAA6B,eAAKf,IAAL,CAAUc,KAAKE,GAAf,EAAoB,KAApB,CAA7B,CAAP;AACD;AAH2B,GAAxB,CAZO,EAiBZb,IAjBY,CAiBP,eAAKc,IAAL,CAAUpB,WAAV,CAjBO,CAAf;AAkBA,SAAOI,MAAP;AACD;;QDCQP,Y,GAAAA,Y","file":"gulp-pigalle-alpha.dist.js","sourcesContent":["import path from 'path';\nimport gulp from 'gulp';\nimport gulpLoadPlugins from 'gulp-load-plugins';\nimport gutil from 'gulp-util';\nimport rollup from 'rollup-stream';\nimport source from 'vinyl-source-stream';\nimport buffer from 'vinyl-buffer';\n\nconst PluginError = gutil.PluginError;\nconst PLUGIN_NAME = 'gulp-pigalle-builder';\nconst g = gulpLoadPlugins({lazy: true});\n\nfunction buildLibrary(entryFilename = 'index.js', entryPath = './src', destination = './dist', outFilename='index.js') {\n  if (!entryFilename) {\n    throw new PluginError(PLUGIN_NAME, 'Missing entry file');\n  }\n  const entry = path.join(entryPath, entryFilename);\n\n  const stream = rollup({\n    entry: entry,\n    sourceMap: true,})\n    .pipe(source(entryFilename, entryPath))\n    .pipe(buffer())\n    .pipe(g.sourcemaps.init({loadMaps: true}))\n    .pipe(g.babel({\n      presets: ['es2015', 'stage-1'],\n      plugins: ['transform-decorators-legacy', 'transform-export-extensions', 'add-module-exports',]\n    }))\n    .pipe(g.uglify())\n    .pipe(g.rename(outFilename))\n    .pipe(g.sourcemaps.write('.', {\n      sourceRoot: (file) => {\n        return path.relative(file.relative, path.join(file.cwd, 'src'));\n      }\n    }))\n    .pipe(gulp.dest(destination));\n  return stream;\n}\n\nexport { buildLibrary };\n","import path from 'path';\n\nimport gulp from 'gulp';\nimport gulpLoadPlugins from 'gulp-load-plugins';\nimport gutil from 'gulp-util';\nimport rollup from 'rollup-stream';\nimport source from 'vinyl-source-stream';\nimport buffer from 'vinyl-buffer';\n\nconst PluginError = gutil.PluginError;\nconst PLUGIN_NAME = 'gulp-pigalle-builder';\nconst g = gulpLoadPlugins({lazy: true});\n\nexport function buildLibrary(entryFilename = 'index.js', entryPath = './src', destination = './dist', outFilename='index.js') {\n  if (!entryFilename) {\n    throw new PluginError(PLUGIN_NAME, 'Missing entry file');\n  }\n  const entry = path.join(entryPath, entryFilename);\n\n  const stream = rollup({\n    entry: entry,\n    sourceMap: true,})\n    .pipe(source(entryFilename, entryPath))\n    .pipe(buffer())\n    .pipe(g.sourcemaps.init({loadMaps: true}))\n    .pipe(g.babel({\n      presets: ['es2015', 'stage-1'],\n      plugins: ['transform-decorators-legacy', 'transform-export-extensions', 'add-module-exports',]\n    }))\n    .pipe(g.uglify())\n    .pipe(g.rename(outFilename))\n    .pipe(g.sourcemaps.write('.', {\n      sourceRoot: (file) => {\n        return path.relative(file.relative, path.join(file.cwd, 'src'));\n      }\n    }))\n    .pipe(gulp.dest(destination));\n  return stream;\n}\n"],"sourceRoot":"../src"}